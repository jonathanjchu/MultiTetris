{"version":3,"sources":["components/tetris/TetrisBoard.js","components/tetris/TetrisBoardMini.js","components/tetris/GameOverView.js","components/tetris/ScoreBox.js","components/tetris/NextPiece.js","components/chat/ChatForm.js","components/chat/ChatItem.js","components/chat/ChatRoom.js","components/tetris/TetrisGame.js","components/lobby/UserItem.js","components/lobby/CountDown.js","components/lobby/Lobby.js","components/lobby/UserNameForm.js","App.js","serviceWorker.js","index.js"],"names":["TetrisBoard","_this","this","react_default","a","createElement","id","props","board","map","row","i","className","key","color","j","concat","colorKey","Component","TetrisBoardMini","username","GameOverView","ScoreBox","lines","NextPiece","showGrid","shape","length","push","block","ChatForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","submitMessage","e","preventDefault","state","message","onNewMessage","setState","onMessageChange","target","value","onSubmit","type","onChange","ChatItem","chatClassName","isMyUsername","ChatRoom","msg","socket","emit","messages","toConsumableArray","timestamp","Date","now","endpoint","_this2","SocketIOClient","on","data","off","disconnect","_this3","Fragment","chat_ChatItem","chat_ChatForm","TetrisGame","startGame","document","addEventListener","onKeyPress","gameState","isGameOver","removeEventListener","keyCode","match","params","opponents","hasOwnProperty","err","console","log","react_router_dom","to","chat_ChatRoom","tetris_TetrisBoard","tetris_NextPiece","nextShape","tetris_ScoreBox","linesRemoved","opp","tetris_TetrisBoardMini","tetris_GameOverView","UserItem","toggleReady","onSetReady","rowClass","status","isReady","isUser","onClick","CountDown","updateTime","timeRemaining","clearInterval","timer","onCountDownFinish","startTime","setInterval","Lobby","findUserAndSetToReady","users","countDownFinish","history","setReady","ready","canSetReady","countDown","isStarting","countDownTimer","allUsers","newuser","filter","x","quitter","u","lobby_UserItem","lobby_CountDown","withRouter","UserNameForm","onUserNameChange","canSubmit","onUserNameSubmit","disabled","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.0165d3df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass TetrisBoard extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main_board\">\r\n        {\r\n          this.props.board.map((row, i) =>\r\n            <div className=\"row\" key={i}>\r\n              {\r\n                row.map((color, j) =>\r\n                    <div className={`block ${this.props.colorKey[color]}`} key={j}></div>\r\n                )\r\n              }\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TetrisBoard;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass TetrisBoardMini extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mini_board\">\r\n        <h5>{this.props.username}</h5>\r\n        {\r\n          this.props.board.map((row, i) =>\r\n            <div className=\"row\" key={i}>\r\n              {\r\n                row.map((color, j) =>\r\n                  <div className={`block ${this.props.colorKey[color]}`} key={j}></div>\r\n                )\r\n              }\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TetrisBoardMini;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass GameOverView extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"game_over\">\r\n        <h1>\r\n          GAME OVER\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOverView;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass ScoreBox extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"score_box\">\r\n        <h3>Lines: {this.props.lines}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScoreBox;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass NextPiece extends Component {\r\n  render() {\r\n    let showGrid = [];\r\n\r\n    for (let i = 0; i < this.props.shape.length; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < this.props.shape[i].length; j++) {\r\n        row.push(\"block \" + this.props.colorKey[this.props.shape[i][j]]);\r\n      }\r\n\r\n      showGrid.push(row);\r\n    }\r\n\r\n    return (\r\n      <div id=\"next_piece\">\r\n        <h4>Next:</h4>\r\n        <div className=\"box\">\r\n          {\r\n            showGrid.map((row, i) =>\r\n              <div className=\"row\" key={i}>\r\n                {\r\n                  row.map((block, j) =>\r\n                    <div className={block} key={j}></div>\r\n                  )\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NextPiece;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass ChatForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  submitMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.state.message.length > 0) {\r\n      this.props.onNewMessage(this.state.message);\r\n      this.setState({ message: \"\" });\r\n    }\r\n  }\r\n\r\n  onMessageChange = (e) => {\r\n    this.setState({ message: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.submitMessage}>\r\n          <input type=\"text\"\r\n            onChange={this.onMessageChange}\r\n            value={this.state.message} />\r\n          <input type=\"submit\" value=\"Send\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatForm;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass ChatItem extends Component {\r\n  render() {\r\n\r\n    let chatClassName = \"chat_row\";\r\n\r\n    if (this.props.isMyUsername) {\r\n      chatClassName += \" chat_highlight\";\r\n    }\r\n\r\n    return (\r\n      <div className={chatClassName}>\r\n        <span className=\"chat_user\">\r\n          {this.props.username}: \r\n        </span>\r\n        <span className=\"chat_msg\">\r\n          {this.props.message}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatItem;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport SocketIOClient from 'socket.io-client';\r\nimport ChatForm from './ChatForm';\r\nimport ChatItem from './ChatItem';\r\n\r\nclass ChatRoom extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // endpoint: \"192.168.1.81:54810/chat\",\r\n      // endpoint: \"localhost:54810/chat\",\r\n      endpoint: \"172.31.39.165:54810/chat\",\r\n      socket: null,\r\n      messages: [],\r\n      username: this.props.username\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let socket = SocketIOClient(this.state.endpoint);\r\n\r\n    socket.on('get_all_messages', data => {\r\n      this.setState({\r\n        messages: data.messages\r\n      });\r\n    });\r\n\r\n    socket.on('receive_new_message', data => {\r\n      let messages = [...this.state.messages];\r\n\r\n      messages.push({\r\n        username: data.username,\r\n        message: data.message,\r\n        timestamp: data.timestamp\r\n      });\r\n\r\n\r\n      this.setState({\r\n        messages: messages\r\n      });\r\n    });\r\n\r\n    this.setState({\r\n      socket: socket\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.socket.off();\r\n    this.state.socket.disconnect();\r\n  }\r\n\r\n  onNewMessage = (msg) => {\r\n    this.state.socket.emit('send_new_message', {\r\n      username: this.state.username,\r\n      message: msg\r\n    });\r\n\r\n    let messages = [...this.state.messages];\r\n    messages.push({\r\n      username: this.state.username,\r\n      message: msg,\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    this.setState({\r\n      messages: messages\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <div id=\"chatroom\">\r\n          {\r\n            this.state.messages.map((msg, i) => \r\n            <>\r\n            {\r\n              msg.username === this.state.username ?\r\n              <ChatItem key={i} username={msg.username} message={msg.message} isMyUsername={true} />\r\n              :\r\n              <ChatItem key={i} username={msg.username} message={msg.message} isMyUsername={false} />\r\n            }\r\n            </>\r\n            )\r\n          }\r\n        </div>\r\n        <ChatForm onNewMessage={this.onNewMessage} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatRoom;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../App.css';\r\nimport SocketIOClient from 'socket.io-client';\r\nimport TetrisBoard from './TetrisBoard';\r\nimport TetrisBoardMini from './TetrisBoardMini';\r\nimport GameOverView from './GameOverView';\r\nimport ScoreBox from './ScoreBox';\r\nimport NextPiece from './NextPiece';\r\nimport ChatRoom from '../chat/ChatRoom';\r\n\r\nclass TetrisGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // endpoint: \"192.168.1.81:54810/tetris\",\r\n      endpoint: \"172.31.39.165:54810/tetris\",\r\n      // endpoint: \"192.168.1.164:54810/tetris\",\r\n      // endpoint: \"localhost:54810/tetris\",\r\n      id: this.props.match.params.id,\r\n      socket: null,\r\n\r\n      isGameOver: false,\r\n      gameState: null,\r\n\r\n      messages: [],\r\n\r\n      colorKey: [\r\n        \"blank\",\r\n        \"blue\",\r\n        \"purple\",\r\n        \"green\",\r\n        \"orange\",\r\n        \"red\",\r\n        \"yellow\",\r\n        \"gray\"\r\n      ]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let socket = SocketIOClient(this.state.endpoint);\r\n    this.startGame(socket);\r\n    this.setState({\r\n      socket: socket\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.socket.emit('leave_game', { id: this.state.id });\r\n    this.state.socket.off();\r\n    this.state.socket.disconnect();\r\n  }\r\n\r\n  startGame = (socket) => {\r\n    socket.emit('start_game', {\r\n      id: this.state.id\r\n    });\r\n\r\n    document.addEventListener('keydown', this.onKeyPress);\r\n\r\n    socket.on('game_state', data => {\r\n      this.setState({\r\n        gameState: data.gameState,\r\n        isGameOver: false,\r\n      });\r\n    });\r\n\r\n    socket.on('game_over', data => {\r\n      this.setState({\r\n        isGameOver: true\r\n      });\r\n      document.removeEventListener('keydown', this.onKeyPress);\r\n    })\r\n  }\r\n\r\n  onKeyPress = (e) => {\r\n    this.state.socket.emit('key_press', {\r\n      keyCode: e.keyCode,\r\n      id: this.state.id\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    let opponents = [];\r\n\r\n    try {\r\n      for (let key in this.state.gameState) {\r\n        if (this.state.gameState.hasOwnProperty(key) && key !== this.state.id) {\r\n          opponents.push(this.state.gameState[key]);\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Link to=\"/\" className=\"nav\">Quit</Link>\r\n        {\r\n          this.state.gameState ?\r\n            <div id=\"game\">\r\n              <h2>{this.state.gameState[this.state.id].username}</h2>\r\n              <div id=\"left_bar\">\r\n                <div id=\"chat_bar\">\r\n                  <ChatRoom username={this.state.gameState[this.state.id].username} />\r\n                </div>\r\n                <div id=\"instructions\">\r\n                  <p><b><u>How to play</u></b></p>\r\n                  <p><b>Rotate:</b> Up</p>\r\n                  <p><b>Move:</b> Left, Right, Down</p>\r\n                  <p><b>Drop:</b> Space</p>\r\n                  <br />\r\n                  <p>Clearing 2 or more lines will give junk lines to your opponents</p>\r\n                </div>\r\n              </div>\r\n              <TetrisBoard board={this.state.gameState[this.state.id].board} colorKey={this.state.colorKey} />\r\n              <div id=\"right_bar\">\r\n                <NextPiece shape={this.state.gameState[this.state.id].nextShape} colorKey={this.state.colorKey} />\r\n                <ScoreBox lines={this.state.gameState[this.state.id].linesRemoved} />\r\n                {\r\n                  opponents.map((opp, i) =>\r\n                    <TetrisBoardMini key={i} board={opp.board} username={opp.username} colorKey={this.state.colorKey} />\r\n                  )\r\n                }\r\n              </div>\r\n              {\r\n                this.state.isGameOver ?\r\n                  <GameOverView /> : <></>\r\n              }\r\n            </div>\r\n            :\r\n            <h1>\r\n              Loading...\r\n            </h1>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TetrisGame;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass UserItem extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  toggleReady = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSetReady();\r\n  }\r\n\r\n  render() {\r\n    let rowClass = \"lobby_row\";\r\n    let status = \"\";\r\n\r\n    if (this.props.isReady) {\r\n      rowClass += \" ready\";\r\n      status = \"Ready!\";\r\n    }\r\n    else {\r\n      rowClass += \" not_ready\";\r\n      status = \"Waiting...\";\r\n    }\r\n\r\n\r\n    return (\r\n      <div className={rowClass}>\r\n        <h5 className=\"lobby_player\">\r\n          {this.props.username}\r\n        </h5>\r\n        {\r\n          this.props.isUser && !this.props.isReady ?\r\n            <button onClick={this.toggleReady}>\r\n              Ready?\r\n            </button>\r\n            :\r\n            <p className=\"lobby_status\">\r\n              {status}\r\n            </p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserItem;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass CountDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      timeRemaining: this.props.startTime,\r\n      timer: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      timer: setInterval(this.updateTime, 1000)\r\n    });\r\n  }\r\n\r\n  updateTime = () => {\r\n    let timeRemaining = this.state.timeRemaining;\r\n    timeRemaining--;\r\n\r\n    if (timeRemaining === 0) {\r\n      clearInterval(this.state.timer);\r\n      this.props.onCountDownFinish();\r\n    }\r\n\r\n    this.setState({ timeRemaining: timeRemaining });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"countdown\">\r\n        <h1>\r\n          Starting in {this.state.timeRemaining}...\r\n          </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountDown;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport SocketIOClient from 'socket.io-client';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ChatRoom from '../chat/ChatRoom';\r\nimport UserItem from './UserItem';\r\nimport CountDown from './CountDown';\r\n\r\nclass Lobby extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // endpoint: \"192.168.1.81:54810/lobby\",\r\n      endpoint: \"172.31.39.165:54810/lobby\",\r\n      // endpoint: \"192.168.1.164:54810/lobby\",\r\n      // endpoint: \"localhost:54810/lobby\",\r\n      socket: null,\r\n      id: this.props.match.params.id,\r\n      username: \"\",\r\n      users: [],\r\n      countDown: 5,\r\n      isStarting: false,\r\n      countDownTimer: null,\r\n\r\n      canSetReady: true,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    let socket = SocketIOClient(this.state.endpoint);\r\n    socket.emit('joining_lobby', { id: this.state.id })\r\n\r\n    socket.on('confirm_join', data => {\r\n\r\n      console.log(data.username);\r\n      console.log(data.allUsers);\r\n\r\n      this.setState({\r\n        username: data.username,\r\n        users: data.allUsers\r\n      });\r\n    })\r\n\r\n    socket.on('player_joined', data => {\r\n      let users = [...this.state.users];\r\n\r\n      users.push({\r\n        username: data.newuser,\r\n        ready: false\r\n      });\r\n\r\n      this.setState({\r\n        users: users\r\n      });\r\n    });\r\n\r\n    socket.on('player_left', data => {\r\n      let users = [...this.state.users].filter(x => x !== data.quitter);\r\n\r\n      console.log('player_left:' + users);\r\n\r\n      this.setState({\r\n        users: users\r\n      });\r\n    });\r\n\r\n    socket.on('player_ready', data => {\r\n      this.findUserAndSetToReady(data.username);\r\n    });\r\n\r\n    this.setState({\r\n      socket: socket\r\n    });\r\n\r\n    socket.on('lobby_countdown', data => {\r\n      this.setState({\r\n        isStarting: true,\r\n        countDown: data.countDown\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.socket.off();\r\n    this.state.socket.disconnect();\r\n  }\r\n\r\n  findUserAndSetToReady = (username) => {\r\n    let users = [...this.state.users];\r\n\r\n    for (let i = 0; i < users.length; i++) {\r\n\r\n      if (users[i].username === username) {\r\n        users[i].isReady = true;\r\n      }\r\n    }\r\n    this.setState({ users: users });\r\n  }\r\n\r\n  countDownFinish = () => {\r\n    this.props.history.push(`/tetris/${this.state.id}`);\r\n  }\r\n\r\n  setReady = () => {\r\n    this.state.socket.emit('player_set_ready', {\r\n      username: this.state.username,\r\n      id: this.state.id,\r\n      ready: true\r\n    });\r\n\r\n    this.findUserAndSetToReady(this.state.username);\r\n\r\n    this.setState({\r\n      canSetReady: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"game\">\r\n        <h2>Tetris</h2>\r\n        <div id=\"left_bar\">\r\n          <div id=\"chat_bar\">\r\n            {\r\n              this.state.username !== \"\" ?\r\n                <ChatRoom username={this.state.username} />\r\n                :\r\n                <p>Loading...</p>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div id=\"right_bar\">\r\n          <h3>Players</h3>\r\n          {\r\n            this.state.users.map((u, i) =>\r\n              <UserItem key={i} username={u.username}\r\n                id={u.id}\r\n                isReady={u.isReady}\r\n                isUser={u.username === this.state.username}\r\n                onSetReady={this.setReady}\r\n              />\r\n            )\r\n          }\r\n          <p id=\"instructions\">Press \"Ready?\" when ready to play</p>\r\n        </div>\r\n        {\r\n          this.state.isStarting ?\r\n            <CountDown startTime={this.state.countDown} onCountDownFinish={this.countDownFinish} />\r\n            :\r\n            <></>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Lobby);","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport SocketIOClient from 'socket.io-client';\r\n// import { Link, Route, BrowserRouter } from 'react-router-dom';\r\n\r\nclass UserNameForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      endpoint: \"172.31.39.165:54810/usernames\",\r\n      // endpoint: \"192.168.1.81:54810/usernames\",\r\n      // endpoint: \"192.168.1.164:54810/usernames\",\r\n      // endpoint: \"localhost:54810/usernames\",\r\n      username: \"\",\r\n      message: \"\",\r\n      canSubmit: false,\r\n      socket: null\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.socket.off();\r\n    this.state.socket.disconnect();\r\n  }\r\n\r\n  onUserNameChange = (e) => {\r\n    let canSubmit = this.state.canSubmit;\r\n    let message = \"\";\r\n\r\n    if (e.target.value.length > 0 && e.target.value.length < 16) {\r\n      canSubmit = true;\r\n      message = \"\";\r\n    }\r\n    else {\r\n      message = \"Username must be less than 16 characters\";\r\n    }\r\n\r\n    this.setState({\r\n        username: e.target.value,\r\n        canSubmit: canSubmit,\r\n        message: message\r\n    });\r\n  }\r\n\r\n  onUserNameSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      let socket = SocketIOClient(this.state.endpoint);\r\n\r\n      socket.emit('set_username', { username: this.state.username });\r\n  \r\n      socket.on('confirm_username', data => {\r\n          this.setState({\r\n            message: \"\"\r\n          });\r\n          this.props.history.push(`/lobby/${data.id}`);\r\n      });\r\n\r\n      socket.on('username_used', data => {\r\n        this.setState({\r\n          username: \"\",\r\n          message: \"Username already in use\"\r\n        });\r\n      });\r\n\r\n      socket.on('user_too_late', data => {\r\n        this.setState({\r\n          message: \"Game already started\"\r\n        });\r\n      });\r\n\r\n      this.setState({\r\n        socket: socket\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>{this.state.message}</h3>\r\n        <form onSubmit={this.onUserNameSubmit}>\r\n            <label>Enter username: </label>\r\n            <input type=\"text\"\r\n                onChange={this.onUserNameChange}\r\n                value={this.state.username} />\r\n            <input type=\"submit\" value=\"Enter\" disabled={!this.state.canSubmit} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserNameForm;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {  Route, Switch, BrowserRouter } from 'react-router-dom';\r\n// import SocketIOClient from 'socket.io-client';\r\nimport TetrisGame from './components/tetris/TetrisGame';\r\nimport Lobby from './components/lobby/Lobby';\r\nimport UserNameForm from './components/lobby/UserNameForm';\r\n\r\nclass App extends Component {\r\n  onKeyPress = (e) => {\r\n    this.state.socket.emit('key_press', { keyCode: e.keyCode });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={UserNameForm} />\r\n              <Route path=\"/lobby/:id\" component={Lobby} />\r\n              <Route path=\"/tetris/:id\" component={TetrisGame} />\r\n            </Switch>\r\n          </BrowserRouter>\r\n          \r\n        </header>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}